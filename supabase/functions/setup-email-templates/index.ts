import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
};

serve(async (req) => {
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabase = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // Check if user is business admin
    const authHeader = req.headers.get("Authorization")!;
    const token = authHeader.replace("Bearer ", "");
    const { data: { user } } = await supabase.auth.getUser(token);

    if (!user) {
      return new Response(JSON.stringify({ error: "Unauthorized" }), {
        status: 401,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    const { data: isAdmin } = await supabase.rpc("is_business_admin", {
      check_user_id: user.id,
    });

    if (!isAdmin) {
      return new Response(JSON.stringify({ error: "Admin access required" }), {
        status: 403,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }

    // Copy Elyphant logo from lovable-uploads to email-assets storage bucket
    try {
      console.log("Copying Elyphant logo to email-assets bucket...");
      
      // Check if logo already exists
      const { data: existingFile } = await supabase.storage
        .from('email-assets')
        .list('', { search: 'elyphant-logo.png' });

      if (!existingFile || existingFile.length === 0) {
        // Fetch the logo from lovable-uploads
        const logoResponse = await fetch('https://dmkxtkvlispxeqfzlczr.supabase.co/storage/v1/object/public/lovable-uploads/9b4f3dc7-ff8b-46c4-9eb3-56681e8c73b9.png');
        
        if (!logoResponse.ok) {
          console.error("Failed to fetch logo:", logoResponse.status);
        } else {
          const logoBlob = await logoResponse.blob();
          
          // Upload to email-assets bucket
          const { error: uploadError } = await supabase.storage
            .from('email-assets')
            .upload('elyphant-logo.png', logoBlob, {
              cacheControl: '3600',
              upsert: true,
              contentType: 'image/png'
            });

          if (uploadError) {
            console.error("Error uploading logo:", uploadError);
          } else {
            console.log("Logo successfully copied to email-assets bucket");
          }
        }
      } else {
        console.log("Logo already exists in email-assets bucket");
      }
    } catch (logoError) {
      console.error("Error processing logo:", logoError);
      // Continue with template setup even if logo fails
    }

    // Define templates with inline HTML (no imports allowed in Edge Functions)
    const templates = [
      {
        template_type: "order_confirmation",
        template_name: "Order Confirmation Email",
        subject_line: "Order Confirmed - {{order_number}}",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Thank you for your order!",
      },
      {
        template_type: "payment_confirmation",
        template_name: "Payment Confirmation Email",
        subject_line: "Payment Received - {{order_number}}",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Your payment has been processed successfully",
      },
      {
        template_type: "welcome_email",
        template_name: "Welcome Email",
        subject_line: "Welcome to Elyphant! üéÅ",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Start your gifting journey with Elyphant",
      },
      {
        template_type: "gift_invitation",
        template_name: "Gift Invitation Email",
        subject_line: "{{sender_name}} sent you a gift via Elyphant!",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "You've received a gift invitation!",
      },
      {
        template_type: "auto_gift_approval",
        template_name: "Auto Gift Approval Request",
        subject_line: "Approve Gift for {{recipient_name}}",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Review and approve your automated gift",
      },
      {
        template_type: "order_status_update",
        template_name: "Order Status Update",
        subject_line: "Order Update - {{order_number}}",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Your order status has been updated",
      },
      {
        template_type: "cart_abandoned",
        template_name: "Abandoned Cart Recovery",
        subject_line: "Your cart is waiting! üõí",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Complete your purchase before items are gone",
      },
      {
        template_type: "post_purchase_followup",
        template_name: "Post-Purchase Follow-up",
        subject_line: "How was your gift? üíù",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "We'd love your feedback!",
      },
      {
        template_type: "connection_invitation",
        template_name: "Connection Invitation",
        subject_line: "{{sender_name}} wants to connect on Elyphant",
        html_content: "<!-- Template HTML will be generated by orchestrator -->",
        preheader: "Join Elyphant and connect with friends",
      },
    ];

    // Insert templates
    const { data: insertedTemplates, error: insertError } = await supabase
      .from("email_templates")
      .upsert(templates, { onConflict: "template_type" })
      .select();

    if (insertError) {
      console.error("Error inserting templates:", insertError);
      return new Response(
        JSON.stringify({ error: "Failed to insert templates", details: insertError.message }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }

    console.log(`Successfully inserted ${insertedTemplates?.length} templates`);

    return new Response(
      JSON.stringify({
        success: true,
        message: `Successfully set up ${insertedTemplates?.length} email templates`,
        templates: insertedTemplates,
      }),
      {
        status: 200,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  } catch (error: any) {
    console.error("Error in setup-email-templates:", error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      }
    );
  }
});
